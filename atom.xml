<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-16T12:04:24.691Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>dly</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关键字</title>
    <link href="http://example.com/2021/05/16/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://example.com/2021/05/16/%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2021-05-16T10:26:03.000Z</published>
    <updated>2021-05-16T12:04:24.691Z</updated>
    
    <content type="html"><![CDATA[<p>java中包含很多关键字，比如static、final、synchronized、transient等等，有些在日常开发中比较常用，有些不常用，甚至”只知其名，不见其身”，希望在这次总结学习的过程中能对java关键字有更深入的理解。</p><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p><a href="https://zhuanlan.zhihu.com/p/33083924">https://zhuanlan.zhihu.com/p/33083924</a></p><p>如果有人现在问我，final关键字的作用是什么？我的回答是”被final修饰的变量是常量，不能修改”。这个回答就很low，来看看正确使用final的姿势有哪些?</p><p><strong>final可以用来修饰类、方法和变量。</strong></p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>用final修饰普通变量通常分为两种情况，修饰普通基本类变量和修饰引用类型变量，也就是对象类型变量。</p><h6 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h6><p>修饰普通基本类型变量最能清楚直白的表现出final的作用，它能使变量的值无法改变，因为变量不能再次被赋值。</p><p><img src="/2021/05/16/%E5%85%B3%E9%94%AE%E5%AD%97/final1.png" alt="final1"></p><p>运行此程序，编译器会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java: 无法为最终变量age分配值</span></span><br></pre></td></tr></table></figure><h6 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h6><p>使用final修饰引用类型变量时，我们可以保证变量不能被再次赋值， 但我们无法保证对象值的改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">System.out.println(sb); <span class="comment">//  结果：helloworld</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">StringBuilder sb2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb = sb2;  <span class="comment">//  编译错误：无法为最终变量sb分配值</span></span><br></pre></td></tr></table></figure><blockquote><p>如上代码所示， 虽然我们用final修饰变量，但仍旧无法阻止变量内在值的改变。 使用final能保证变量不能改变引用的目标，却不能保证变量所引用的目标本身的变化。因为对于基本类型，我们可以把变量看作是变量值的本身；而对于引用类型变量，变量和变量的值需要区分看待，它们只是以某种方式被关联起来了而已，事实上它们是不同的东西，所以final无法同时作用于两者上。</p></blockquote><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><p>常量是全局的、不可变的，因此我们同时使用static和final来修饰变量，就能达到定义常量的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONST_ONE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONST_TWO = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><p>final可以保证实例变量必须被初始化，这点特性能减少代码出错几率，如令所有Java程序员头疼的NullPointerException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(person.toString().toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码因为没给name赋值，代码在运行起将报NPE异常。假如我们使用final修饰name变量，代码将无法通过编译，因为Java语法规定，final变量在使用前必须被初始化，<strong>因此我们必须在构造函数中初始化name变量，</strong>这样能百分百保证我们使用的name变量不会是null。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;dly&quot;</span>);</span><br><span class="line">        System.out.println(person.toString().toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h5><p>用final修饰方法，假如方法所属的类被继承，方法将不能在子类中被重写。</p><blockquote><p>通常，我们不希望方法在被继承时重写，可以用private修饰，因为这样方法的可见性被限制于方法所在的类中。但是，有时候我们需要公开方法，却又不想方法被重写，此时用final修饰方法就有用武之地了。</p></blockquote><p>（然而，这时又引出了另外一个问题，假如我们使用final修饰private方法，是否有实际意义。 事实上，在现代的jdk中，这么做是没有任何意义的，因为private无法被继承，自然也不存在继承时被修改的问题。 但是在早期的Java版本中，final修饰private方法的作用是告知编译器，这个方法在编译时需要内联处理。这个特性在现代jdk中已经被抛弃。）</p><h5 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h5><p>当用final修饰类时， 表示此类是密封的， 无法被继承。从Java源码中可知，我们最常用的String类便是一个final类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;java中包含很多关键字，比如static、final、synchronized、transient等等，有些在日常开发中比较常用，有些不常用，甚至”只知其名，不见其身”，希望在这次总结学习的过程中能对java关键字有更深入的理解。&lt;/p&gt;
&lt;h4 id=&quot;final&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>mybatis概述</title>
    <link href="http://example.com/2021/05/14/mybatis%E6%BA%90%E7%A0%811/"/>
    <id>http://example.com/2021/05/14/mybatis%E6%BA%90%E7%A0%811/</id>
    <published>2021-05-14T03:02:20.000Z</published>
    <updated>2021-05-16T15:28:24.955Z</updated>
    
    <content type="html"><![CDATA[<h4 id="阅读策略"><a href="#阅读策略" class="headerlink" title="阅读策略"></a>阅读策略</h4><p>找出软件项目的核心功能，重点关注与核心功能相关的代码。</p><h4 id="mybatis核心功能"><a href="#mybatis核心功能" class="headerlink" title="mybatis核心功能"></a>mybatis核心功能</h4><ul><li>将包含 if等标签的复杂数据库操作语句解析为纯粹的 SQL语句。</li><li>将数据库操作节点和映射接口中的抽象方法进行绑定，在抽象方法被调用时执行数据库操作。</li><li>将输入参数对象转化为数据库操作语句中的参数。</li><li>将数据库操作语句的返回结果转化为对象。</li></ul><h4 id="mybatis包结构"><a href="#mybatis包结构" class="headerlink" title="mybatis包结构"></a>mybatis包结构</h4><p><img src="/2021/05/14/mybatis%E6%BA%90%E7%A0%811/mabatis1.jpeg" alt="包结构"></p><h4 id="阅读技巧"><a href="#阅读技巧" class="headerlink" title="阅读技巧"></a>阅读技巧</h4><blockquote><p>源码阅读过程中有一个非常重要的技巧，那就是从整个项目的外围源码入手。</p><p>外围源码很少依赖核心源码，相对独立。先阅读外围源码，受到其他未阅读部分的干扰较小。</p><p>核心源码大量依赖外围源码。在阅读核心源码时应确保其涉及的外围源码均已阅读完毕，这样可以降低核心源码的阅读难度。</p><p>于是整个源码阅读过程会如同剥洋葱一般，由外及内、逐层深入。</p><p>MyBatis 源码中，基础功能包是最外围的包，配置解析包位于中间，核心操作包位于内层。因此，本书中会按照基础功能包、配置解析包、核心操作包的顺序，以包为单位，对包中的源代码逐一进行阅读。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;阅读策略&quot;&gt;&lt;a href=&quot;#阅读策略&quot; class=&quot;headerlink&quot; title=&quot;阅读策略&quot;&gt;&lt;/a&gt;阅读策略&lt;/h4&gt;&lt;p&gt;找出软件项目的核心功能，重点关注与核心功能相关的代码。&lt;/p&gt;
&lt;h4 id=&quot;mybatis核心功能&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="mybatis" scheme="http://example.com/categories/mybatis/"/>
    
    
  </entry>
  
  <entry>
    <title>接口和抽象方法</title>
    <link href="http://example.com/2021/05/11/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/05/11/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-11T07:06:57.000Z</published>
    <updated>2021-05-15T09:54:39.931Z</updated>
    
    <content type="html"><![CDATA[<p>java类执行顺序</p><p><a href="https://www.cnblogs.com/timetellu/p/11619158.html">https://www.cnblogs.com/timetellu/p/11619158.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;java类执行顺序&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/timetellu/p/11619158.html&quot;&gt;https://www.cnblogs.com/timetellu/p/11619158.html&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>数学素养</title>
    <link href="http://example.com/2021/04/22/%E6%95%B0%E5%AD%A6%E7%B4%A0%E5%85%BB/"/>
    <id>http://example.com/2021/04/22/%E6%95%B0%E5%AD%A6%E7%B4%A0%E5%85%BB/</id>
    <published>2021-04-22T02:08:44.000Z</published>
    <updated>2021-04-23T03:12:31.938Z</updated>
    
    <content type="html"><![CDATA[<ol><li>生活和数学密不可分</li><li>凡事多问几个为什么（例: 清楚某个理论的前因后果） </li><li>笛卡尔坐标系（以某个点为中心，横向扩展、纵向延伸）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;生活和数学密不可分&lt;/li&gt;
&lt;li&gt;凡事多问几个为什么（例: 清楚某个理论的前因后果） &lt;/li&gt;
&lt;li&gt;笛卡尔坐标系（以某个点为中心，横向扩展、纵向延伸）&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="数学" scheme="http://example.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>常用git命令</title>
    <link href="http://example.com/2021/04/21/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2021/04/21/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</id>
    <published>2021-04-21T08:57:04.000Z</published>
    <updated>2021-04-23T03:14:11.769Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>创建本地分支    git branch 分支名</p></li><li><p>删除分支   </p></li><li><p>查看所有分支   git branch -a</p></li><li><p>检出远程分支  git checkout -b dly  origin/dly</p><p>上面的话的意思是：切换到新的分支dly，并且跟踪远程中的分支dly</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建本地分支    git branch 分支名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除分支   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看所有分支   git branch -a&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检出远程分支  git checkout </summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="http://example.com/2021/04/21/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://example.com/2021/04/21/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2021-04-21T08:56:03.000Z</published>
    <updated>2021-04-21T09:08:01.441Z</updated>
    
    <content type="html"><![CDATA[<p>Command + O ：查找类文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Command + O ：查找类文件&lt;/p&gt;
</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>注解</title>
    <link href="http://example.com/2021/04/21/%E6%B3%A8%E8%A7%A3/"/>
    <id>http://example.com/2021/04/21/%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-04-21T07:15:50.000Z</published>
    <updated>2021-05-10T12:01:21.192Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>工作中，用到注解的地方非常多，但是很多时候对注解的认知只停留在机械使用阶段。</p><p><a href="https://www.zhihu.com/question/24401191">https://www.zhihu.com/question/24401191</a>  这篇文章写的还可以。</p><p>文章中有些观点还是挺好的，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果说注释是写给人看的，那么注解就是写给程序看的。它更像一个标签，贴在一个类、一个方法或者字段上。</span><br><span class="line">它的目的是为当前读取该注解的程序提供判断依据及少量附加信息。</span><br></pre></td></tr></table></figure><p>在我看来，注解就是一个标识，它必须依赖java反射技术，不然无法发挥其作用。</p><p>这篇文章中，我有以下目标：</p><ol><li>对注解有一个系统的认识</li><li>了解注解的本质及其实现原理</li><li>关于注解的高级用法及案例</li></ol><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a><strong>基础</strong></h4><p>参考此文 <a href="https://www.runoob.com/w3cnote/java-annotation.html">https://www.runoob.com/w3cnote/java-annotation.html</a></p><p>我这里只介绍注解架构和两个比较重要的元注解</p><h5 id="注解架构"><a href="#注解架构" class="headerlink" title="注解架构"></a>注解架构</h5><p><img src="/2021/04/21/%E6%B3%A8%E8%A7%A3/%E6%B3%A8%E8%A7%A3%E6%9E%B6%E6%9E%84.jpeg" alt="架构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">从中，我们可以看出：</span><br><span class="line">(01) 1 个 Annotation 和 1 个 RetentionPolicy 关联。</span><br><span class="line">可以理解为：每1个Annotation对象，都会有唯一的RetentionPolicy属性。</span><br><span class="line">(02) 1 个 Annotation 和 1~n 个 ElementType 关联。</span><br><span class="line">可以理解为：对于每 1 个 Annotation 对象，可以有若干个 ElementType 属性。</span><br><span class="line">(03) Annotation 有许多实现类，包括：Deprecated, Documented, Inherited, Override 等等。</span><br><span class="line">Annotation 的每一个实现类，都 &quot;和 1个RetentionPolicy关联&quot; 并且 &quot; 和 1~n个ElementType关联&quot;。</span><br></pre></td></tr></table></figure><p>下面，我先介绍框架图的左半边(如下图)，即 Annotation, RetentionPolicy, ElementType；然后在就 Annotation 的实现类进行举例说明。</p><p><img src="/2021/04/21/%E6%B3%A8%E8%A7%A3/%E6%9E%B6%E6%9E%842.jpeg" alt="架构2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ElementType</span> </span>&#123;</span><br><span class="line">    TYPE,               <span class="comment">/* 类、接口（包括注释类型）或枚举声明  */</span></span><br><span class="line"></span><br><span class="line">    FIELD,              <span class="comment">/* 字段声明（包括枚举常量）  */</span></span><br><span class="line"></span><br><span class="line">    METHOD,             <span class="comment">/* 方法声明  */</span></span><br><span class="line"></span><br><span class="line">    PARAMETER,          <span class="comment">/* 参数声明  */</span></span><br><span class="line"></span><br><span class="line">    CONSTRUCTOR,        <span class="comment">/* 构造方法声明  */</span></span><br><span class="line"></span><br><span class="line">    LOCAL_VARIABLE,     <span class="comment">/* 局部变量声明  */</span></span><br><span class="line"></span><br><span class="line">    ANNOTATION_TYPE,    <span class="comment">/* 注释类型声明  */</span></span><br><span class="line"></span><br><span class="line">    PACKAGE             <span class="comment">/* 包声明  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RetentionPolicy</span> </span>&#123;</span><br><span class="line">    SOURCE, <span class="comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了  */</span></span><br><span class="line"></span><br><span class="line">    CLASS,       <span class="comment">/* 编译器将Annotation存储于类对应的.class文件中。默认行为  */</span></span><br><span class="line"></span><br><span class="line">    RUNTIME            <span class="comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(01) Annotation 就是个接口。</strong></p><p><strong>(02) ElementType 是 Enum 枚举类型，它用来指定 Annotation 的类型。</strong></p><p><strong>(03) RetentionPolicy 是 Enum 枚举类型，它用来指定 Annotation 的策略。通俗点说，就是不同 RetentionPolicy 类型的 Annotation 的作用域不同。</strong></p><p>java自带的两个重要的注解</p><p>@Retention</p><p>​        前面我们说过，RetentionPolicy 是 Annotation 的策略属性，而 @Retention 的作用，就是指定 Annotation 的策略属性 ,标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</p><p>@Target</p><p>​     前面我们说过，ElementType 是 Annotation 的类型属性。而 @Target 的作用，就是来指定Annotation 的类型属性 , 标记这个注解应该是哪种 Java 成员。</p><h4 id="注解本质"><a href="#注解本质" class="headerlink" title="注解本质"></a>注解本质</h4><p> java注解本质上来说就是一个继承了Annotation接口的<strong>接口</strong>。反编译一个注解类，如下图所示：</p><p><img src="/2021/04/21/%E6%B3%A8%E8%A7%A3/%E6%9C%AC%E8%B4%A8.png" alt="本质"></p><p>既然是接口，那注解跟接口有哪些联系？有哪些区别？</p><p>先看联系，与注解密切相关的几个接口特性是：</p><ol><li>接口中的所有方法默认都是public abstract，方法不能有方法体</li><li>实现类必须实现接口的所有方法</li><li>jdk1.8之后，接口新增了default默认方法 ，一个类实现接口后，不必重写接口里的默认方法</li></ol><p>我们给MyAnnotation添加两个属性：</p><p><img src="/2021/04/21/%E6%B3%A8%E8%A7%A3/Annotation1.png" alt="Annotation1"></p><p>可以看到这两个属性有点像方法，而且是抽象方法，反编译看看；</p><p><img src="/2021/04/21/%E6%B3%A8%E8%A7%A3/Annotation2.png" alt="Annotation2"></p><p>如果注解中的属性对应接口方法的话，那么name属性就是接口中的默认方法，其默认值为dly，实现类不必覆盖此方法，age属性就是普通的抽象方法，实现类必须实现age方法。</p><p>这就可以解释为什么我们在使用注解的时候，如果属性没有default值，开发人员不写，就会编译错误。</p><p><img src="/2021/04/21/%E6%B3%A8%E8%A7%A3/Annotation3.png" alt="Annotation3"></p><p>接下来看看，注解和接口的区别：</p><p>虽然注解本质上是接口，并且两者有很多相似之处，但是它们是两个不同的概念。</p><p>注解是干什么的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Annotation本质上就是元数据，诞生的目的就是在java中做标记。</span><br></pre></td></tr></table></figure><p>接口是干什么的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在JAVA编程语言中是一个抽象类型，是抽象方法的集合，是事物行为上的共性。</span><br></pre></td></tr></table></figure><p>区别这里，有待完善。。。不是很清楚</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>参考文章 <a href="https://mp.weixin.qq.com/s/DZYhV2AdpPct5uliq1nYMw">https://mp.weixin.qq.com/s/DZYhV2AdpPct5uliq1nYMw</a></p><p>在实际开发中，我使用自定义注解+aop实现对用户操作行为数据的收集。</p><p>如下：自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OperateLog &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Platform <span class="title">platform</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">operateType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parameterExpression</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">remark</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpLogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(xxx.OperateLog)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">log</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Method method = ((MethodSignature) pjp.getSignature()).getMethod();</span><br><span class="line">        OperateLog operateLog = method.getAnnotation(OperateLog.class);</span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        Object response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 目标方法执行</span></span><br><span class="line">            response = pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果操作类型是updateEnter，使用spel解析获取请求参数</span></span><br><span class="line">        <span class="keyword">if</span> (OperateType.UPDATE_ENTER.equals(operateLog.operateType())) &#123;</span><br><span class="line">            <span class="comment">// 解析目标方法参数</span></span><br><span class="line">            String param = parseExpression(pjp, method, operateLog.parameterExpression());</span><br><span class="line">            handle(<span class="keyword">new</span> Object[]&#123;param&#125;, operateLog, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 处理管理控制台操作日志</span></span><br><span class="line">            handle(args, operateLog, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理管理控制台操作日志</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args       目标方法请求参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operateLog 操作类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response   返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object[] args, OperateLog operateLog, Object response)</span> </span>&#123;</span><br><span class="line">        OperateLogDO operateLogDO = buildOperateLogDO(operateLog);</span><br><span class="line">        <span class="keyword">switch</span> (operateLog.operateType()) &#123;</span><br><span class="line">            <span class="comment">// 添加企业日志</span></span><br><span class="line">            <span class="keyword">case</span> OperateType.ADD_ENTER:</span><br><span class="line">                addEnterpriseLog(args, operateLogDO, response);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operateLogDO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEnterpriseLog</span><span class="params">(Object[] args, OperateLogDO operateLogDO, Object response)</span> </span>&#123;</span><br><span class="line">        EnterpriseAddVO vo = (EnterpriseAddVO) args[<span class="number">0</span>];</span><br><span class="line">        String enterpriseName = vo.getEnterpriseName();</span><br><span class="line"></span><br><span class="line">        String remark = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (response <span class="keyword">instanceof</span> RestResponse) &#123;</span><br><span class="line">            RestResponse restRes = (RestResponse) response;</span><br><span class="line">            <span class="keyword">if</span> (restRes.isSuccess()) &#123;</span><br><span class="line">                Object result = restRes.getResult();</span><br><span class="line">                remark = result.toString();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                GlobalErrorMessage message = (GlobalErrorMessage) restRes.getMessage();</span><br><span class="line">                remark = message.getGlobal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        operateLogDO.setRemark(remark);</span><br><span class="line">        operateLogDO.setOperateContent(enterpriseName);</span><br><span class="line">        logService.saveOperateLog(operateLogDO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> operateLog</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> OperateLogDO <span class="title">buildOperateLogDO</span><span class="params">(OperateLog operateLog)</span> </span>&#123;</span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        OperateLogDO operateLogDO = <span class="keyword">new</span> OperateLogDO();</span><br><span class="line">        operateLogDO.setOperateLogUuid(IdUtils.uuid());</span><br><span class="line">        operateLogDO.setOperateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        operateLogDO.setPlatform(operateLog.platform().getCode());</span><br><span class="line">        operateLogDO.setOperateType(operateLog.operateType());</span><br><span class="line">        operateLogDO.setIp(request.getRemoteAddr());</span><br><span class="line">        UserDTO userDTO = UserOperate.getUser();</span><br><span class="line">        operateLogDO.setUsername(userDTO.getUsername());</span><br><span class="line">        <span class="keyword">return</span> operateLogDO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析spel表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expressionParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">parseExpression</span><span class="params">(ProceedingJoinPoint pjp, Method method, String expressionParam)</span> </span>&#123;</span><br><span class="line">        SpelExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">        Expression expression = parser.parseExpression(expressionParam);</span><br><span class="line">        EvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line">        <span class="comment">// 获取参数值</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="comment">// 获取运行时参数的名称</span></span><br><span class="line">        LocalVariableTableParameterNameDiscoverer discoverer</span><br><span class="line">                = <span class="keyword">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class="line">        String[] parameterNames = discoverer.getParameterNames(method);</span><br><span class="line">        <span class="comment">// 将参数绑定到context中</span></span><br><span class="line">        <span class="keyword">if</span> (parameterNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterNames.length; i++) &#123;</span><br><span class="line">                context.setVariable(parameterNames[i], args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析表达式，获取结果</span></span><br><span class="line">        <span class="keyword">return</span> String.valueOf(expression.getValue(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;工作中，用到注解的地方非常多，但是很多时候对注解的认知只停留在机械使用阶段。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhi</summary>
      
    
    
    
    <category term="java基础" scheme="http://example.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>DevOps</title>
    <link href="http://example.com/2021/04/21/DevOps/"/>
    <id>http://example.com/2021/04/21/DevOps/</id>
    <published>2021-04-21T02:49:06.000Z</published>
    <updated>2021-04-21T07:17:41.522Z</updated>
    
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>ELK</title>
    <link href="http://example.com/2021/04/19/ELK/"/>
    <id>http://example.com/2021/04/19/ELK/</id>
    <published>2021-04-19T08:55:48.000Z</published>
    <updated>2021-04-21T07:14:23.424Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/121099453">https://zhuanlan.zhihu.com/p/121099453</a></p><p>ELK是一个解决方案，目的在于搭建一套集中式的日志系统。</p><p>E：Elasticsearch，实时的分布式搜索和分析引擎</p><p>L：Logstash，有实时渠道能力的数据收集引擎</p><p>K：Kibana，可视化Web平台</p><p><a href="https://gitee.com/moxi159753/LearningNotes/tree/master/ElasticStack">https://gitee.com/moxi159753/LearningNotes/tree/master/ElasticStack</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/121099453&quot;&gt;https://zhuanlan.zhihu.com/p/121099453&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ELK是一个解决方案，目的在于搭建一套集中式的日志系统。&lt;/p&gt;
&lt;p&gt;E：</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
